CREATE TABLESPACE TBS_FINANCE DATAFILE
    '/oracle/u01/app/oracle/oradata/dgporclw/tbs_finance00.dbf' SIZE 100M
    AUTOEXTEND ON NEXT 8192 MAXSIZE 20480M
    LOGGING ONLINE PERMANENT BLOCKSIZE 8192
  EXTENT MANAGEMENT LOCAL AUTOALLOCATE DEFAULT
 NOCOMPRESS  SEGMENT SPACE MANAGEMENT AUTO;

create user finance identified by finance default tablespace TBS_FINANCE quota unlimited on TBS_FINANCE;
grant connect,resource,create view to finance;
grant select on dim_month to finance;
grant select,insert,update on DP_AT_A_GLANCE.STG_AT_GLANCE to finance;

-- drop table FIN_MOEIN_MAPPING;
-- truncate table FIN_MOEIN_MAPPING;
create table FIN_MOEIN_MAPPING
(
    ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY primary key,
    FST varchar2(20),
    FST_01_Code varchar2(10),
    FST_01_Desc varchar2(100),
    FST_02_CODE NUMBER(10),
    FST_02_DESC varchar2(100),
    MOEIN NUMBER(10),
    FST_Product varchar2(100)
);
create index ix_MOEIN_MAPPING_MOEIN
	on FIN_MOEIN_MAPPING (MOEIN)
;
select * from FIN_MOEIN_MAPPING
where fst like '%Grand%'
;
-- delete from FIN_MOEIN_MAPPING where fst like '%Grand%';


-- drop table FIN_MOEIN_REPORT_ETL;
create table FIN_MOEIN_REPORT_ETL (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY primary key,
    ETL_DATE date default current_date,
    PYEAR INTEGER,
    PMONTH INTEGER,
    DETAIL_COUNT NUMBER(18),
    DETAIL_Debit_SUM NUMBER(18),
    DETAIL_Credit_SUM NUMBER(18),
    active NUMBER(1) default 1
);

-- drop table FIN_MOEIN_REPORT_DETAIL;
create table FIN_MOEIN_REPORT_DETAIL (
  ID NUMBER(18) GENERATED BY DEFAULT AS IDENTITY primary key,
  F_MOEIN_REPORT_ETL NUMBER(10) not null,
  GLCode       NUMBER(8),
  SLCode       NUMBER(8),
  GNumber       NUMBER(8),
  Sequence     NUMBER(8),
  DailyNumber          NUMBER(8),
  CreationDate         Date,
  LastModificationDate Date,
  VoucherItemID	    NUMBER(18),
  VoucherRef	NUMBER(18),
  BranchRef	    NUMBER(8),
  GLRef	        NUMBER(8),
  SLRef	        NUMBER(8),
  Debit	        NUMBER(18),
  Credit	    NUMBER(18),
  TargetCurrencyRef	    NUMBER(8),
  TargetCurrencyDebit	NUMBER(8),
  TargetCurrencyCredit	NUMBER(8),
  FiscalYearRef	        NUMBER(8),
  GDate	            Date,
  VoucherTypeRef	NUMBER(8),
  State	            NUMBER(8),
  LedgerRef	        NUMBER(8),
  DLLevel4	        NUMBER(18),
  DLLevel5	        NUMBER(18),
  DLLevel6	        NUMBER(18),
  DLLevel7	        NUMBER(18),
  DLLevel8	        NUMBER(18),
  DLLevel9	        NUMBER(18)
);
-- alter table FIN_MOEIN_REPORT_DETAIL add constraint fk_FIN_MOEIN_REPORT_ETL
-- foreign key (F_MOEIN_REPORT_ETL) references FIN_MOEIN_REPORT_ETL (ID);

create index IX_FIN_MOEIN_REPORT_DETAIL_ETL
    on FIN_MOEIN_REPORT_DETAIL (F_MOEIN_REPORT_ETL);

create index IX_FIN_MOEIN_REPORT_DETAIL_SLCODE
    on FIN_MOEIN_REPORT_DETAIL (SLCODE);


update (select etl.ID,etl.DETAIL_COUNT,etl.DETAIL_Credit_SUM,etl.DETAIL_Debit_SUM
            ,detail.F_MOEIN_REPORT_ETL,detail.DETAIL_COUNT2
            ,detail.DETAIL_Debit_SUM2,detail.DETAIL_Credit_SUM2
    from FIN_MOEIN_REPORT_ETL etl
    join (select F_MOEIN_REPORT_ETL,count(*) DETAIL_COUNT2
    ,sum(Debit) DETAIL_Debit_SUM2,sum(Credit) DETAIL_Credit_SUM2
    from FIN_MOEIN_REPORT_DETAIL group by F_MOEIN_REPORT_ETL) detail
    on detail.F_MOEIN_REPORT_ETL=etl.ID
    where etl.id=2)
set
    DETAIL_COUNT =DETAIL_COUNT2,
    DETAIL_Debit_SUM =DETAIL_Debit_SUM2,
    DETAIL_Credit_SUM =DETAIL_Credit_SUM2
where id=2
;
update FIN_MOEIN_REPORT_ETL set active=0 where pyear={year} and pmonth={month} and active=1
;


create view vw_fin_fst_balance as
select m.FST_02_CODE,m.FST_02_DESC
     ,nvl(sum(d.DEBIT),0)-nvl(sum(d.CREDIT),0) balance
    ,e.pyear,e.pmonth
from FIN_MOEIN_REPORT_DETAIL d
         full join FIN_MOEIN_MAPPING m on m.MOEIN = d.slcode
         left join FIN_MOEIN_REPORT_ETL e on e.ID=d.F_MOEIN_REPORT_ETL
where e.active=1
group by m.FST_02_CODE,m.FST_02_DESC,e.pyear,e.pmonth
;

select FST_02_CODE,FST_02_DESC,PYEAR,PMONTH,BALANCE from vw_fin_fst_balance
;

select * from finance.vw_fin_fst_balance
pivot (sum(balance) for pmonth in (1 فروردین,2 اردیبهشت,3 خرداد,4 تیر,5 مرداد,6 شهریور,7 مهر,8 آبان,9 آذر,10 دی,11 بهمن,12 اسفند))
order by FST_02_CODE
;
CP_MONGODB
;
select TO_CHAR(TO_DATE(7, 'MM','nls_calendar=persian'), 'MONTH','nls_calendar=persian') from dual;
;
with fst_balance as
( select to_char(FST_02_CODE) FST_02_CODE, FST_02_DESC,to_char(pyear) pyear,to_char(pmonth) pmonth,balance
,case pmonth
from finance.vw_fin_fst_balance
    order by pmonth)
select * from fst_balance
pivot (sum(balance) for pmonth in (1 فروردین,2 اردیبهشت,3 خرداد,4 تیر,5 مرداد,6 شهریور,7 مهر,8 آبان,9 آذر,10 دی,11 بهمن,12 اسفند))
order by FST_02_CODE
;


select to_char(FST_02_CODE) FST_02_CODE, FST_02_DESC,to_char(pyear) pyear,to_char(pmonth) pmonth,balance
     ,lpad(pmonth,2,'0')||'-'|| case pmonth when 1 then 'فروردین'when 2 then 'اردیبهشت' when 3 then 'خرداد'
        when 4 then 'تیر' when 5 then 'مرداد'when 6 then 'شهریور'
        when 7 then 'مهر' when 8 then 'آبان'when 9 then 'آذر'
        when 10 then 'دی' when 11 then 'بهمن'when 12 then 'اسفند'
        else '(نامشخص)' end pmonthname
from finance.vw_fin_fst_balance
order by lpad(FST_02_CODE,4,0),pmonth
;



-- drop table fin_statement_mapping;
create table fin_statement_mapping (
    ID NUMBER(18) GENERATED BY DEFAULT AS IDENTITY primary key,
    statement varchar2(100) not null,
    category varchar2(100) not null,
    subcategory varchar2(100) ,
    subcategory2 varchar2(100) ,
    product varchar2(100) not null,
    fst_02_code NUMBER(8),
    excel_formula varchar2(1000)
);
-- alter table fin_statement_mapping add (subcategory2 varchar2(100))
-- alter table fin_statement_mapping rename column glcode to fst_02_code;
truncate table fin_statement_mapping;

insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','1-Revenue','a)SuperApp','Bill',0101);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','1-Revenue','a)SuperApp','Top-Up',0102);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','1-Revenue','a)SuperApp','InternetPackage',0103);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','1-Revenue','a)SuperApp','Shaparak',0104);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','1-Revenue','b)CreditManagement','Consumer Credit',0105);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','1-Revenue','b)CreditManagement','BNPL',0111);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','1-Revenue','c)Payment','IPG',0106);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','1-Revenue','c)Payment','Refund',0107);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','1-Revenue','c)Payment','Wallet',0108);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','1-Revenue',null,'CreditScoring',0109);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','1-Revenue',null,'KYC',0112);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','1-Revenue','d)InsureTech','InsureTech',0110);

insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','2-Cost of Revenue','a)SuperApp','Bill',0201);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','2-Cost of Revenue','a)SuperApp','Top-Up',0202);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','2-Cost of Revenue','a)SuperApp','InternetPackage',0203);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','2-Cost of Revenue','b)CreditManagement','Consumer Credit',0204);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','2-Cost of Revenue','b)CreditManagement','BNPL',0211);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','2-Cost of Revenue','c)Payment','IPG',0205);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','2-Cost of Revenue','c)Payment','Refund',0206);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','2-Cost of Revenue','c)Payment','Wallet',0207);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','2-Cost of Revenue',null,'CreditScoring',0208);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','2-Cost of Revenue',null,'KYC',0212);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','2-Cost of Revenue',null,'Wealth',0213);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','2-Cost of Revenue',null,'InsureTech',0210);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','2-Cost of Revenue',null,'HR: Transfered From SG&A',0209);

insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','3-Operation Expenses',null,'SMS',0300);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','3-Operation Expenses',null,'HR: OPS',0301);

insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','4-Marketing Expenses',null,'Marketing',0400);

insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','5-Selling, General and Administrative Expenses',null,'Salary and Related',0500);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','5-Selling, General and Administrative Expenses',null,'Staff Other Expenses',0501);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','5-Selling, General and Administrative Expenses',null,'Rent and Related',0502);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','5-Selling, General and Administrative Expenses',null,'Foods and Related',0503);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','5-Selling, General and Administrative Expenses',null,'Consultancy',0504);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','5-Selling, General and Administrative Expenses',null,'Tangible Assets Maintenance',0505);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','5-Selling, General and Administrative Expenses',null,'Intangible Assets Maintenance',0506);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','5-Selling, General and Administrative Expenses',null,'Internet',0507);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','5-Selling, General and Administrative Expenses',null,'Depreciation',0508);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','5-Selling, General and Administrative Expenses',null,'Amortization',0509);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','5-Selling, General and Administrative Expenses',null,'Guard',0510);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','5-Selling, General and Administrative Expenses',null,'Audit',0511);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','5-Selling, General and Administrative Expenses',null,'Stationary and Supply',0512);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','5-Selling, General and Administrative Expenses',null,'Other Expenses',0599);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','5-Selling, General and Administrative Expenses',null,'Transfered to Cost of Revenue',0513);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','5-Selling, General and Administrative Expenses',null,'Transfered to Product Under Development',0514);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','5-Selling, General and Administrative Expenses',null,'Transferred to D&A',0515);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','5-Selling, General and Administrative Expenses',null,'Transferred to salary',0516);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','5-Selling, General and Administrative Expenses',null,'Transferred to Other',0517);

insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','6-Other Operational Revenue and (Expenses)',null,'Other Operational Revenue',0698);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','6-Other Operational Revenue and (Expenses)',null,'Other Operational Expenses',0699);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','6-Other Operational Revenue and (Expenses)',null,'Transfered to Product Under Development',0600);

insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','7-Non-Operational Revenue and (Expenses)',null,'Bad Debt',0700);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','7-Non-Operational Revenue and (Expenses)',null,'Bank Interest',0701);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','7-Non-Operational Revenue and (Expenses)',null,'Bank Fee',0702);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','7-Non-Operational Revenue and (Expenses)',null,'Tax',0703);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('A)Statement of Profit or Loss','7-Non-Operational Revenue and (Expenses)',null,'Transfered to Product Under Development',0704);

insert into fin_statement_mapping (statement,category,subcategory,subcategory2,product,fst_02_code) values ('B)Statement of Financial Position','1-Non-Current Assets','a)Tangible Assets - Net','Tangible Assets','Properties and Equipment',0800);
insert into fin_statement_mapping (statement,category,subcategory,subcategory2,product,fst_02_code) values ('B)Statement of Financial Position','1-Non-Current Assets','a)Tangible Assets - Net','Tangible Assets','Computers, Data Centers and Accessories',0801);
insert into fin_statement_mapping (statement,category,subcategory,subcategory2,product,fst_02_code) values ('B)Statement of Financial Position','1-Non-Current Assets','a)Tangible Assets - Net','Tangible Assets','Refurbishment in Rental Unit',0802);
insert into fin_statement_mapping (statement,category,subcategory,subcategory2,product,fst_02_code) values ('B)Statement of Financial Position','1-Non-Current Assets','a)Tangible Assets - Net','Accumulated Depreciation','Properties and Equipment',0803);
insert into fin_statement_mapping (statement,category,subcategory,subcategory2,product,fst_02_code) values ('B)Statement of Financial Position','1-Non-Current Assets','a)Tangible Assets - Net','Accumulated Depreciation','Computers, Data Centers and Accessories',0804);
insert into fin_statement_mapping (statement,category,subcategory,subcategory2,product,fst_02_code) values ('B)Statement of Financial Position','1-Non-Current Assets','a)Tangible Assets - Net','Accumulated Depreciation','Refurbishment in Rental Unit',0805);

insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','1-Non-Current Assets','b)Intangible Assets - Net','Intangible Assets',0806);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','1-Non-Current Assets','b)Intangible Assets - Net','Accumulated Amortization',0807);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','1-Non-Current Assets',null,'Products Under Development',0808);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','1-Non-Current Assets',null,'Products Under Development: Transfered From P&L',0810);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','1-Non-Current Assets',null,'Prepayment',0809);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','1-Non-Current Assets',null,'Other Assets',0899);

insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','2-Current Assets',null,'VAT Receivable',0904);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','2-Current Assets',null,'Prepayment',0900);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','2-Current Assets',null,'Non-Trade Receivable',0901);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','2-Current Assets',null,'Trade Receivable',0902);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','2-Current Assets',null,'Trade Receivable-Refund',0905);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','2-Current Assets',null,'Cash and Banks',0903);

insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','3-Equity',null,'Shared Capital',1000);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','3-Equity',null,'Quasi Amount',1001);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','3-Equity',null,'Accumulated Profit/(Loss)',1002);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','3-Equity',null,'Prior Period Adjustment',1003);

insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','4-Non-Current Liabilities',null,'Staff Termination Benefit',1100);

insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','5-Current Liabilities',null,'Provision',1200);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','5-Current Liabilities',null,'VAT Payable',1201);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','5-Current Liabilities',null,'Advances Received',1202);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','5-Current Liabilities',null,'Non-Trade Payable',1203);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','5-Current Liabilities',null,'Trade Payable',1204);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','5-Current Liabilities',null,'Trade Payable-Refund',1206);
insert into fin_statement_mapping (statement,category,subcategory,product,fst_02_code) values ('B)Statement of Financial Position','5-Current Liabilities',null,'Credit Line Financing',1205);

-- update fin_statement_mapping set statement='A)Statement of Profit or Loss' where statement='Statement of Profit or Loss';
-- update fin_statement_mapping set statement='B)Statement of Financial Position' where statement='Statement of Financial Position';

-- update fin_statement_mapping set category='1-Revenue' where category='Revenue';
-- update fin_statement_mapping set category='2-Cost of Revenue' where category='Cost of Revenue';
-- update fin_statement_mapping set category='3-Operation Expenses' where category='Operation Expenses';
-- update fin_statement_mapping set category='4-Marketing Expenses' where category='Marketing Expenses';
-- update fin_statement_mapping set category='5-Selling, General and Administrative Expenses' where category='Selling, General and Administrative Expenses';
-- update fin_statement_mapping set category='6-Other Operational Revenue and (Expenses)' where category='Other Operational Revenue and (Expenses)';
-- update fin_statement_mapping set category='7-Non-Operational Revenue and (Expenses)' where category='Non-Operational Revenue and (Expenses)';

-- update fin_statement_mapping set category='1-Non-Current Assets' where category='Non-Current Assets';
-- update fin_statement_mapping set category='2-Current Assets' where category='Current Assets';
-- update fin_statement_mapping set category='3-Equity' where category='Equity';
-- update fin_statement_mapping set category='4-Non-Current Liabilities' where category='Non-Current Liabilities';
-- update fin_statement_mapping set category='5-Current Liabilities' where category='Current Liabilities';

-- update fin_statement_mapping set subcategory='a)SuperApp' where subcategory='SuperApp';
-- update fin_statement_mapping set subcategory='b)CreditManagement' where subcategory='CreditManagement';
-- update fin_statement_mapping set subcategory='c)Payment' where subcategory='Payment';
-- update fin_statement_mapping set subcategory='d)InsureTech' where subcategory='InsureTech';

-- update fin_statement_mapping set subcategory='a)Tangible Assets - Net' where subcategory='Tangible Assets - Net';
-- update fin_statement_mapping set subcategory='b)Intangible Assets - Net' where subcategory='Intangible Assets - Net';


create or replace view vw_fin_actual_deck_slcode as
select case when d.SLCode=411303 and d.DLLevel5=998001 then 104 else s.fst_02_code end FST_02_CODE
     ,case when d.SLCode=411303 and d.DLLevel5=998001 then 'Shaparak' else s.product end product
     ,s.statement,s.category,s.subcategory,s.subcategory2,d.slcode
     ,nvl(sum(d.DEBIT),0)-nvl(sum(d.CREDIT),0) balance
     ,e.pyear,e.pmonth
from FIN_MOEIN_REPORT_DETAIL d
left join FIN_MOEIN_REPORT_ETL e on e.ID=d.F_MOEIN_REPORT_ETL
left join FIN_MOEIN_MAPPING m on m.MOEIN = d.slcode
left join FIN_STATEMENT_MAPPING s on s.fst_02_code=m.FST_02_CODE
where e.active=1
group by e.pyear,e.pmonth,s.statement,s.category,s.subcategory,s.subcategory2,d.slcode
    ,case when d.SLCode=411303 and d.DLLevel5=998001 then 104 else s.fst_02_code end
    ,case when d.SLCode=411303 and d.DLLevel5=998001 then 'Shaparak' else s.product end
;

/*
-- drop view  vw_fin_actual_deck_moein;
create or replace view vw_fin_actual_deck_moein as
select s.fst_02_code FST_02_CODE,s.statement,s.category,s.subcategory,s.subcategory2,s.product
     ,nvl(sum(d.DEBIT),0)-nvl(sum(d.CREDIT),0) balance
     ,e.pyear,e.pmonth
from FIN_MOEIN_REPORT_DETAIL d
         left join FIN_MOEIN_REPORT_ETL e on e.ID=d.F_MOEIN_REPORT_ETL
         left join FIN_MOEIN_MAPPING m on m.MOEIN = d.slcode
         left join FIN_STATEMENT_MAPPING s on s.fst_02_code=m.FST_02_CODE
where e.active=1
group by s.fst_02_code,s.statement,s.category,s.subcategory,s.subcategory2,s.product,e.pyear,e.pmonth
order by s.fst_02_code,s.statement,s.category,s.subcategory,s.subcategory2,s.product
;
*/


-- drop view vw_fin_statement_int_tax_dep_amor;
create or replace view vw_fin_statement_int_tax_dep_amor as
with q_yearmonth as (select distinct pyear,pmonth from fin_moein_report_etl where active=1)
   ,q_balance as (select nvl(sum(d.DEBIT), 0) - nvl(sum(d.CREDIT), 0) balance, m.FST_02_CODE, e.pyear, e.pmonth
                  from FIN_MOEIN_REPORT_DETAIL d
                           left join FIN_MOEIN_REPORT_ETL e on e.ID = d.F_MOEIN_REPORT_ETL
                           left join FIN_MOEIN_MAPPING m on m.MOEIN = d.slcode
                  group by m.FST_02_CODE, e.pyear, e.pmonth)
select * from
(select 'A)Statement of Profit or Loss' statement,'8-Interest + Tax + Depreciation + Amortization' category,null subcategory,null subcategory2 from dual) s
,(select 'Interest (Credit Facilities Expenses)' product,null FST_02_CODE,pyear,pmonth
     ,0 balance from q_yearmonth union all
select 'Tax' product,null FST_02_CODE,pyear,pmonth pmonth
     ,(select -balance from q_balance b where b.fst_02_code=703 and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ) balance
    from q_yearmonth ym union all
select 'Depreciation' product,null FST_02_CODE,pyear,pmonth
     ,(select balance from q_balance b where b.fst_02_code=508 and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ) balance
    from q_yearmonth ym union all
select 'Amortization' product,null FST_02_CODE,pyear,pmonth
     ,(select balance from q_balance b where b.fst_02_code=509 and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ) balance
    from q_yearmonth ym union all
select 'Transferred to D&A' product,null FST_02_CODE,pyear,pmonth
     ,(select balance from q_balance b where b.fst_02_code=515 and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ) balance
    from q_yearmonth ym
)
;

select * from vw_fin_statement_int_tax_dep_amor;

-- drop view vw_fin_statement_specials

create or replace view vw_fin_statement_specials as
with q_yearmonth as (select distinct pyear,pmonth from fin_moein_report_etl where active=1)
,q_fst_balance as (select nvl(sum(d.DEBIT), 0) - nvl(sum(d.CREDIT), 0) balance, m.FST_02_CODE, e.pyear, e.pmonth
      from FIN_MOEIN_REPORT_DETAIL d
               left join FIN_MOEIN_REPORT_ETL e on e.ID = d.F_MOEIN_REPORT_ETL
               left join FIN_MOEIN_MAPPING m on m.MOEIN = d.slcode
      where e.active=1
      group by m.FST_02_CODE, e.pyear, e.pmonth)
,q_cat_balance as (select sum(balance) balance,category,pyear,pmonth from vw_fin_actual_deck_slcode group by category,pyear,pmonth)
,q_pc1 as (select '01' FST_02_CODE,'PC1' product,pyear,pmonth
            ,-nvl((select balance from q_cat_balance b where b.category='1-Revenue' and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0)
            -nvl((select balance from q_cat_balance b where b.category='2-Cost of Revenue' and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
           from q_yearmonth ym group by pyear,pmonth)
,q_pc2 as (select '02' FST_02_CODE,'PC2' product,pyear,pmonth
            ,nvl((select balance from q_pc1 b where b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0)
            -nvl((select balance from q_cat_balance b where b.category='3-Operation Expenses' and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
           from q_yearmonth ym group by pyear,pmonth)
,q_pc3 as (select '03' FST_02_CODE,'PC3' product,pyear,pmonth
            ,nvl((select balance from q_pc2 b where b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0)
            -nvl((select balance from q_cat_balance b where b.category='4-Marketing Expenses' and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
           from q_yearmonth ym group by pyear,pmonth)
,q_opl as (select '04' FST_02_CODE,'Operational Profit or (Loss)' product,pyear,pmonth
            ,nvl((select balance from q_pc3 b where b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0)
            -nvl((select balance from q_cat_balance b where b.category='5-Selling, General and Administrative Expenses' and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0)
            +nvl((select balance from q_cat_balance b where b.category='6-Other Operational Revenue and (Expenses)' and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
           from q_yearmonth ym group by pyear,pmonth)
,q_npl as (select '05' FST_02_CODE,'Net Profit or (Loss)' product,pyear,pmonth
            ,nvl((select balance from q_opl b where b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0)
            +nvl((select balance from q_cat_balance b where b.category='7-Non-Operational Revenue and (Expenses)' and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
           from q_yearmonth ym group by pyear,pmonth)
,q_ebitda as (select '06' FST_02_CODE,'EBITDA' product,pyear,pmonth
            ,nvl((select balance from q_npl b where b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0)
            +nvl((select sum(balance) balance from vw_fin_statement_int_tax_dep_amor b where b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
           from q_yearmonth ym group by pyear,pmonth)
,q_assets as (select '07' FST_02_CODE,'Total Assets' product,pyear,pmonth
            ,nvl((select balance from q_cat_balance b where b.category='1-Non-Current Assets' and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0)
            +nvl((select balance from q_cat_balance b where b.category='2-Current Assets' and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
          from q_yearmonth ym group by pyear,pmonth)
,q_liabilities as (select '08' FST_02_CODE,'Total Liabilities' product,pyear,pmonth
            ,nvl((select balance from q_cat_balance b where b.category='4-Non-Current Liabilities' and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0)
            +nvl((select balance from q_cat_balance b where b.category='5-Current Liabilities' and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
          from q_yearmonth ym group by pyear,pmonth)
,q_equity_liabilities as (select '09' FST_02_CODE,'Total Equity +  Liabilities' product,pyear,pmonth
            ,nvl((select balance from q_liabilities b where b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0)
            +nvl((select balance from q_cat_balance b where b.category='3-Equity' and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
          from q_yearmonth ym group by pyear,pmonth)
,q_refund as (select '10' FST_02_CODE,'Refund Working Capital' product,pyear,pmonth
            ,-nvl((select sum(balance) from q_fst_balance b where b.fst_02_code=905 and b.pyear=ym.pyear and b.pmonth=ym.pmonth ),0)
            +nvl((select sum(balance) from q_fst_balance b where b.fst_02_code=1206 and b.pyear=ym.pyear and b.pmonth=ym.pmonth ),0) balance
          from q_yearmonth ym group by pyear,pmonth)
select * from
(select 'C)Statement of Specials' statement,'1-Specials' category,null subcategory,null subcategory2 from dual) s
,(select * from q_pc1 union all
  select * from q_pc2 union all
  select * from q_pc3 union all
  select * from q_opl union all
  select * from q_npl union all
  select * from q_ebitda union all
  select * from q_assets union all
  select * from q_liabilities union all
  select * from q_equity_liabilities union all
  select * from q_refund
)
;

select * from vw_fin_statement_specials;


create or replace view vw_fin_statement_of_cash_flow as
with q_yearmonth as (select distinct pyear,pmonth from fin_moein_report_etl where active=1)
,q_fst_balance as (select nvl(sum(d.DEBIT), 0) - nvl(sum(d.CREDIT), 0) balance, m.FST_02_CODE, e.pyear, e.pmonth
      from FIN_MOEIN_REPORT_DETAIL d
               left join FIN_MOEIN_REPORT_ETL e on e.ID = d.F_MOEIN_REPORT_ETL
               left join FIN_MOEIN_MAPPING m on m.MOEIN = d.slcode
      group by m.FST_02_CODE, e.pyear, e.pmonth)
,q_cashflow_no_refund as
    (select '2-Operating Cash Flow (Refund Excluded)' category,'EBITDA' product,null subcategory,pyear,pmonth
         ,nvl((select balance from q_fst_balance b where b.fst_02_code=1003 and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0)
    +nvl((select balance from vw_fin_statement_specials b where b.product='EBITDA' and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
    from q_yearmonth ym union all
    select '2-Operating Cash Flow (Refund Excluded)' category,'Tax' product,null subcategory,pyear,pmonth
         ,nvl((select balance from q_fst_balance b where b.fst_02_code=703 and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
    from q_yearmonth ym union all
    select '2-Operating Cash Flow (Refund Excluded)' category,'Current Assets (Refund Excluded)' product,'Changes in Working Capital' subcategory,pyear,pmonth
         ,-nvl((select sum(balance) from q_fst_balance b where b.fst_02_code in (900,901,902,904) and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
    from q_yearmonth ym union all
    select '2-Operating Cash Flow (Refund Excluded)' category,'Current Liabilities (Refund Excluded)' product,'Changes in Working Capital' subcategory,pyear,pmonth
         ,nvl((select sum(balance) from q_fst_balance b where b.fst_02_code in (1100,1200,1201,1202,1203,1204,1205) and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
    from q_yearmonth ym)
,q_cash_flow_with_refund as
    (select '1-Operating Cash Flow (Refund Included)' category,'Operating Cash Flow (Refund Excluded)' product,null subcategory,pyear,pmonth
              ,-nvl((select sum(balance) from q_cashflow_no_refund b where b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
         from q_yearmonth ym union all
     select '1-Operating Cash Flow (Refund Included)' category,'Current Assets (Refund)' product,null subcategory,pyear,pmonth
              ,-nvl((select sum(balance) from q_fst_balance b where b.fst_02_code in (905) and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
         from q_yearmonth ym union all
     select '1-Operating Cash Flow (Refund Included)' category,'Current Liabilities (Refund)' product,null subcategory,pyear,pmonth
              ,nvl((select sum(balance) from q_fst_balance b where b.fst_02_code in (1206) and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
         from q_yearmonth ym )
,q_cash_flow_invest as
    (select '3-Investing Cash Flow' category,'Tangible Asset Purchase / (Sale)' product,null subcategory,pyear,pmonth
          ,nvl((select sum(balance) from q_fst_balance b where b.fst_02_code in (0800,0801,0802,0803,0804,0805,0809,0899) and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
     from q_yearmonth ym union all
     select '3-Investing Cash Flow' category,'Intangible Asset Purchase / (Sale)' product,null subcategory,pyear,pmonth
          ,nvl((select sum(balance) from q_fst_balance b where b.fst_02_code in (0806,0807,0808,0810) and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
     from q_yearmonth ym)
,q_cash_flow_finance as
    (select '4-Financing Cash Flow' category,'Shared Capital' product,null subcategory,pyear,pmonth
          ,nvl((select sum(balance) from q_fst_balance b where b.fst_02_code in (1000) and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
     from q_yearmonth ym union all
     select '4-Financing Cash Flow' category,'Injected Fund Thorough Investors' product,null subcategory,pyear,pmonth
          ,nvl((select sum(balance) from q_fst_balance b where b.fst_02_code in (1001) and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
     from q_yearmonth ym)
,q_cash_flow_begin as (
    select '5-Cash at the Beginning of Period' category,'Cash at the Beginning' product,null subcategory,pyear,pmonth
     ,nvl((select sum(balance) from q_cash_flow_with_refund b where b.PYEAR*100+b.PMONTH < ym.PYEAR*100+ym.PMONTH ),0)
     +nvl((select sum(balance) from q_cash_flow_invest b where b.PYEAR*100+b.PMONTH < ym.PYEAR*100+ym.PMONTH ),0)
     +nvl((select sum(balance) from q_cash_flow_finance b where b.PYEAR*100+b.PMONTH < ym.PYEAR*100+ym.PMONTH ),0) balance
    from q_yearmonth ym)
,q_cash_flow_end as (
    select '6-Cash at the End of Period' category, 'Cash at the End' product,null subcategory,pyear,pmonth
     ,nvl((select sum(balance) from q_cash_flow_with_refund b where b.PYEAR*100+b.PMONTH <= ym.PYEAR*100+ym.PMONTH ),0)
     +nvl((select sum(balance) from q_cash_flow_invest b where b.PYEAR*100+b.PMONTH <= ym.PYEAR*100+ym.PMONTH ),0)
     +nvl((select sum(balance) from q_cash_flow_finance b where b.PYEAR*100+b.PMONTH <= ym.PYEAR*100+ym.PMONTH ),0) balance
    from q_yearmonth ym)

select * from(select 'D)Statement of Cash Flow' statement,null subcategory2,null FST_02_CODE from dual) s
,(
    select * from q_cash_flow_with_refund union all
    select * from q_cashflow_no_refund union all
    select * from q_cash_flow_invest union all
    select * from q_cash_flow_finance union all
    select * from q_cash_flow_begin union all
    select * from q_cash_flow_end
)
;
--

create or replace view vw_fin_actual_deck as
select FST_02_CODE,STATEMENT,CATEGORY,SUBCATEGORY,SUBCATEGORY2,PRODUCT,sum(BALANCE), pyear, pmonth from vw_fin_actual_deck_slcode
group by FST_02_CODE,STATEMENT,CATEGORY,SUBCATEGORY,SUBCATEGORY2,PRODUCT, pyear, pmonth
union all
select FST_02_CODE,STATEMENT,CATEGORY,SUBCATEGORY,SUBCATEGORY2,PRODUCT,BALANCE,PYEAR,PMONTH from vw_fin_statement_int_tax_dep_amor
union all
select to_number(FST_02_CODE),STATEMENT,CATEGORY,SUBCATEGORY,SUBCATEGORY2,PRODUCT,BALANCE,PYEAR,PMONTH from vw_fin_statement_specials
union all
select FST_02_CODE,STATEMENT,CATEGORY,SUBCATEGORY,SUBCATEGORY2,PRODUCT,BALANCE,PYEAR,PMONTH from vw_fin_statement_of_cash_flow
;

select * from vw_fin_actual_deck;

-- obi direct query for actual_deck
        select nvl(d.statement,'«نامشخص»') as statement,d.category,d.subcategory,d.subcategory2,lpad(FST_02_CODE,4,' ')||'-'||nvl(d.product,'«نامشخص»') as product
     ,lpad(FST_02_CODE,4,' ') FST_02_CODE,to_char(pyear) pyear,to_char(pmonth) pmonth,balance
     ,lpad(pmonth,2,'0')||'-'|| case pmonth when 1 then 'فروردین'when 2 then 'اردیبهشت' when 3 then 'خرداد'
                                            when 4 then 'تیر' when 5 then 'مرداد'when 6 then 'شهریور'
                                            when 7 then 'مهر' when 8 then 'آبان'when 9 then 'آذر'
                                            when 10 then 'دی' when 11 then 'بهمن'when 12 then 'اسفند'
                                            else '«نامشخص»' end pmonthname
from finance.vw_fin_actual_deck d
order by lpad(FST_02_CODE,4,' ')||'-'||nvl(d.product,'«نامشخص»')
;



-- ====================================================


select to_char( nvl(sum(d.DEBIT), 0) - nvl(sum(d.CREDIT), 0) , '9,999,999,999,999') balance, m.FST_02_CODE, e.pyear,e.pmonth
from FIN_MOEIN_REPORT_DETAIL d
         left join FIN_MOEIN_REPORT_ETL e on e.ID = d.F_MOEIN_REPORT_ETL
         left join FIN_MOEIN_MAPPING m on m.MOEIN = d.slcode
where 1=1
and FST_02_CODE=105
  and PYEAR=1401 and PMONTH=1 and e.active=1
group by m.FST_02_CODE, e.pyear, e.pmonth
order by FST_02_CODE

;

select to_char( nvl(sum(d.DEBIT), 0) - nvl(sum(d.CREDIT), 0) , '9,999,999,999,999') balance,m.MOEIN, m.FST_02_CODE, e.pyear,e.pmonth
from FIN_MOEIN_REPORT_DETAIL d
         left join FIN_MOEIN_REPORT_ETL e on e.ID = d.F_MOEIN_REPORT_ETL
         left join FIN_MOEIN_MAPPING m on m.MOEIN = d.slcode
where FST_02_CODE=105 and PYEAR=1401 and PMONTH=1 and e.active=1
group by m.FST_02_CODE, e.pyear, e.pmonth,m.MOEIN

;
-- "    -5,524,688,005",411310
-- "    -7,547,006,639",411306

select to_char( nvl(d.DEBIT, 0) - nvl(d.CREDIT, 0) , '9,999,999,999,999') balance,d.GNumber,e.id
     ,to_char(d.LastModificationDate,'YYYY/MM/DD','nls_calendar=persian') mod_date
--      ,to_char(e.ETL_DATE,'YYYY/MM/DD','nls_calendar=persian') etl_date
from FIN_MOEIN_REPORT_DETAIL d
         left join FIN_MOEIN_REPORT_ETL e on e.ID = d.F_MOEIN_REPORT_ETL
where d.SLCODE=411306 and PYEAR=1401 and PMONTH=1 and e.active=1
-- group by d.GNumber
order by nvl(d.DEBIT, 0) - nvl(d.CREDIT, 0) asc

select * from FIN_MOEIN_REPORT_ETL where PYEAR=1400 and PMONTH=12;


select count(*)
from FIN_MOEIN_REPORT_DETAIL d
left join FIN_MOEIN_REPORT_ETL e on e.ID = d.F_MOEIN_REPORT_ETL
where  PYEAR=1401 and PMONTH=1 and e.active=1
and to_char(d.LastModificationDate,'YYYY/MM/DD','nls_calendar=persian') >='1401/02/19'
-- group by d.GNumber
-- order by nvl(d.DEBIT, 0) - nvl(d.CREDIT, 0) asc


create or replace view vw_fin_at_glance as
select 'Revenue' kpi_name, to_date(m.LAST_DAY_OF_MONTH,'YYYY/MM/DD','nls_calendar=persian') GDATE
     ,replace(m.LAST_DAY_OF_MONTH,'/','') PDATE
     ,9 as KPI, 'Rahkaran' as KPI_DETAILS
     ,sum(BALANCE) MEASURE
from FINANCE.VW_FIN_ACTUAL_DECK d
left join mongodb.dim_month m on m.P_YEARMONTH=d.PYEAR*100+PMONTH
where CATEGORY='1-Revenue'
group by m.LAST_DAY_OF_MONTH
union all
select 'Profit Contribution 1' kpi_name, to_date(m.LAST_DAY_OF_MONTH,'YYYY/MM/DD','nls_calendar=persian') GDATE
     ,replace(m.LAST_DAY_OF_MONTH,'/','') PDATE
     ,10 as KPI, 'Rahkaran' as KPI_DETAILS
     ,sum(BALANCE) MEASURE
from FINANCE.VW_FIN_ACTUAL_DECK d
         left join mongodb.dim_month m on m.P_YEARMONTH=d.PYEAR*100+PMONTH
where PRODUCT='PC1'
group by m.LAST_DAY_OF_MONTH
union all
select 'EBITDA' kpi_name, to_date(m.LAST_DAY_OF_MONTH,'YYYY/MM/DD','nls_calendar=persian') GDATE
     ,replace(m.LAST_DAY_OF_MONTH,'/','') PDATE
     ,11 as KPI, 'Rahkaran' as KPI_DETAILS
     ,sum(BALANCE) MEASURE
from FINANCE.VW_FIN_ACTUAL_DECK d
         left join mongodb.dim_month m on m.P_YEARMONTH=d.PYEAR*100+PMONTH
where PRODUCT='EBITDA'
group by m.LAST_DAY_OF_MONTH
union all
select 'Operating Cash Flow' kpi_name, to_date(m.LAST_DAY_OF_MONTH,'YYYY/MM/DD','nls_calendar=persian') GDATE
     ,replace(m.LAST_DAY_OF_MONTH,'/','') PDATE
     ,12 as KPI, 'Rahkaran' as KPI_DETAILS
     ,sum(BALANCE) MEASURE
from FINANCE.VW_FIN_ACTUAL_DECK d
         left join mongodb.dim_month m on m.P_YEARMONTH=d.PYEAR*100+PMONTH
where category='1-Operating Cash Flow (Refund Included)'
group by m.LAST_DAY_OF_MONTH
union all
select 'PBT' kpi_name, to_date(m.LAST_DAY_OF_MONTH,'YYYY/MM/DD','nls_calendar=persian') GDATE
     ,replace(m.LAST_DAY_OF_MONTH,'/','') PDATE
     ,17 as KPI, 'Rahkaran' as KPI_DETAILS
     ,sum(BALANCE) MEASURE
from FINANCE.VW_FIN_ACTUAL_DECK d
         left join mongodb.dim_month m on m.P_YEARMONTH=d.PYEAR*100+PMONTH
where PRODUCT='Net Profit or (Loss)'
group by m.LAST_DAY_OF_MONTH

;

-- create index ix_vw_fin_at_glance on vw_fin_at_glance(kpi,PDATE);


select g.*,g.MEASURE/1000000000
from vw_fin_at_glance g
where PDATE=14010131
;

-- delete from DP_AT_A_GLANCE.STG_AT_GLANCE where kpi in (9,10,11,12,17);

INSERT INTO DP_AT_A_GLANCE.STG_AT_GLANCE
select GDATE,PDATE,KPI,KPI_DETAILS,MEASURE
from FINANCE.vw_fin_at_glance d
where not exists(select * from DP_AT_A_GLANCE.STG_AT_GLANCE sg
                 where sg.kpi=d.kpi and sg.PDATE=d.pdate)
;

update dp_at_a_glance.ft_at_glance s
set s.yoy_measure = (select ss.measure from dp_at_a_glance.ft_at_glance ss where ss.kpi = s.kpi and s.yoy_date = ss.pdate)
where s.pdate >=13970101 ;

update dp_at_a_glance.ft_at_glance s
set s.mom_measure = (select ss.measure from dp_at_a_glance.ft_at_glance ss where ss.kpi = s.kpi and s.mom_date = ss.pdate)
where s.pdate >= 13970101;



select 'EBITDA' kpi_name, to_date(m.LAST_DAY_OF_MONTH,'YYYY/MM/DD','nls_calendar=persian') GDATE
     ,replace(m.LAST_DAY_OF_MONTH,'/','') PDATE
     ,11 as KPI, 'Rahkaran' as KPI_DETAILS
     ,sum(BALANCE) MEASURE
from FINANCE.VW_FIN_ACTUAL_DECK d
         left join mongodb.dim_month m on m.P_YEARMONTH=d.PYEAR*100+PMONTH
where PRODUCT='EBITDA'
  and pyear=1401 and pmonth=2
group by m.LAST_DAY_OF_MONTH
;
-- -229,500,380,018
-- -205,305,057,300     <=   (48,092,473,659)


select to_number(FST_02_CODE),STATEMENT,CATEGORY,SUBCATEGORY,SUBCATEGORY2,PRODUCT,BALANCE,PYEAR,PMONTH
from vw_fin_statement_specials
where PRODUCT='EBITDA'
  and pyear=1401 and pmonth=1
;
-- -114,750,190,009
with q_yearmonth as (select distinct pyear,pmonth from fin_moein_report_etl where active=1)
   ,q_fst_balance as (select nvl(sum(d.DEBIT), 0) - nvl(sum(d.CREDIT), 0) balance, m.FST_02_CODE, e.pyear, e.pmonth
                      from FIN_MOEIN_REPORT_DETAIL d
                               left join FIN_MOEIN_REPORT_ETL e on e.ID = d.F_MOEIN_REPORT_ETL
                               left join FIN_MOEIN_MAPPING m on m.MOEIN = d.slcode
                      group by m.FST_02_CODE, e.pyear, e.pmonth)
   ,q_cat_balance as (select sum(balance) balance,category,pyear,pmonth from vw_fin_actual_deck_slcode group by category,pyear,pmonth)
   ,q_pc1 as (select '01' FST_02_CODE,'PC1' product,pyear,pmonth
                   ,-nvl((select balance from q_cat_balance b where b.category='1-Revenue' and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0)
                    -nvl((select balance from q_cat_balance b where b.category='2-Cost of Revenue' and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
              from q_yearmonth ym group by pyear,pmonth)
   ,q_pc2 as (select '02' FST_02_CODE,'PC2' product,pyear,pmonth
                   ,nvl((select balance from q_pc1 b where b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0)
        -nvl((select balance from q_cat_balance b where b.category='3-Operation Expenses' and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
              from q_yearmonth ym group by pyear,pmonth)
   ,q_pc3 as (select '03' FST_02_CODE,'PC3' product,pyear,pmonth
                   ,nvl((select balance from q_pc2 b where b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0)
        -nvl((select balance from q_cat_balance b where b.category='4-Marketing Expenses' and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
              from q_yearmonth ym group by pyear,pmonth)
   ,q_opl as (select '04' FST_02_CODE,'Operational Profit or (Loss)' product,pyear,pmonth
                   ,nvl((select balance from q_pc3 b where b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0)
                        -nvl((select balance from q_cat_balance b where b.category='5-Selling, General and Administrative Expenses' and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0)
        +nvl((select balance from q_cat_balance b where b.category='6-Other Operational Revenue and (Expenses)' and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
              from q_yearmonth ym group by pyear,pmonth)
   ,q_npl as (select '05' FST_02_CODE,'Net Profit or (Loss)' product,pyear,pmonth
                   ,nvl((select balance from q_opl b where b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0)
        +nvl((select balance from q_cat_balance b where b.category='7-Non-Operational Revenue and (Expenses)' and b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
              from q_yearmonth ym group by pyear,pmonth)
   ,q_ebitda as (select '06' FST_02_CODE,'EBITDA' product,pyear,pmonth
                      ,nvl((select balance from q_npl b where b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0)
        +nvl((select sum(balance) balance from vw_fin_statement_int_tax_dep_amor b where b.PYEAR=ym.PYEAR and b.PMONTH=ym.PMONTH ),0) balance
                 from q_yearmonth ym group by pyear,pmonth)
select * from q_pc1--q_ebitda--q_npl--q_ebitda
where pyear=1401 and pmonth=2
;
--  -54,225,705,456 <>   2,218,933,284   PC1
--  1,479,124,858 <>   (4,597,611,637)   EBITDA
-- -7,516,078,854 <>   (18,867,379,339)   Net Profit or Loss
select sum(balance) balance from vw_fin_actual_deck_slcode
where category='1-Revenue'
-- where category='2-Cost of Revenue'
  and pyear=1401 and pmonth=2;
-- -29,799,762,593  <>   29,907,688,683  Revenue
-- -13,914,272,107  <>   29,907,688,683  Revenue

-- 24,425,942,863   <>   27,688,755,399  Cost Of Revenue
-- 27,484,968,338   <>   27,688,755,399  Cost Of Revenue

select * from vw_fin_actual_deck_slcode
where category='1-Revenue'
and pyear=1401 and pmonth=2
;
-- -107,683,115  <>  107,683,115
select s.fst_02_code FST_02_CODE,s.statement,s.category,s.subcategory,s.subcategory2,s.product
     ,nvl(sum(d.DEBIT),0)-nvl(sum(d.CREDIT),0) balance
     ,e.pyear,e.pmonth
from FIN_MOEIN_REPORT_DETAIL d
         left join FIN_MOEIN_REPORT_ETL e on e.ID=d.F_MOEIN_REPORT_ETL
         left join FIN_MOEIN_MAPPING m on m.MOEIN = d.slcode
         left join FIN_STATEMENT_MAPPING s on s.fst_02_code=m.FST_02_CODE
where e.active=1
and pyear=1401 and pmonth=2 and m.FST_02_CODE=101 and m.fst_product ='Bill'
group by s.fst_02_code,s.statement,s.category,s.subcategory,s.subcategory2,s.product,e.pyear,e.pmonth
-- order by s.fst_02_code,s.statement,s.category,s.subcategory,s.subcategory2,s.product

select count(*) from FIN_MOEIN_MAPPING;
select * from FIN_MOEIN_MAPPING
where FST_02_CODE=101
;

-- truncate table FIN_MOEIN_MAPPING;
update FIN_MOEIN_MAPPING set FST_02_CODE=101 where FST_02_CODE=100 and FST_Product='Bill';
update FIN_MOEIN_MAPPING set FST_02_CODE=102 where FST_02_CODE=100 and FST_Product='Top-Up';
update FIN_MOEIN_MAPPING set FST_02_CODE=103 where FST_02_CODE=100 and FST_Product='InternetPackage';
update FIN_MOEIN_MAPPING set FST_02_CODE=104 where FST_02_CODE=100 and FST_Product='Shaparak';--
update FIN_MOEIN_MAPPING set FST_02_CODE=105 where FST_02_CODE=100 and FST_Product='Consumer Credit';
update FIN_MOEIN_MAPPING set FST_02_CODE=106 where FST_02_CODE=100 and FST_Product='IPG';
update FIN_MOEIN_MAPPING set FST_02_CODE=107 where FST_02_CODE=100 and FST_Product='Refund';
update FIN_MOEIN_MAPPING set FST_02_CODE=108 where FST_02_CODE=100 and FST_Product='Wallet';
update FIN_MOEIN_MAPPING set FST_02_CODE=109 where FST_02_CODE=100 and FST_Product='CreditScoring';
update FIN_MOEIN_MAPPING set FST_02_CODE=110 where FST_02_CODE=100 and FST_Product='InsureTech';

update FIN_MOEIN_MAPPING set FST_02_CODE=201 where FST_02_CODE=200 and FST_Product='Bill';
update FIN_MOEIN_MAPPING set FST_02_CODE=202 where FST_02_CODE=200 and FST_Product='Top-Up';
update FIN_MOEIN_MAPPING set FST_02_CODE=203 where FST_02_CODE=200 and FST_Product='InternetPackage';
update FIN_MOEIN_MAPPING set FST_02_CODE=204 where FST_02_CODE=200 and FST_Product='Consumer Credit';
update FIN_MOEIN_MAPPING set FST_02_CODE=205 where FST_02_CODE=200 and FST_Product='IPG';
update FIN_MOEIN_MAPPING set FST_02_CODE=206 where FST_02_CODE=200 and FST_Product='Refund';
update FIN_MOEIN_MAPPING set FST_02_CODE=207 where FST_02_CODE=200 and FST_Product='Wallet';
update FIN_MOEIN_MAPPING set FST_02_CODE=208 where FST_02_CODE=200 and FST_Product='CreditScoring';
update FIN_MOEIN_MAPPING set FST_02_CODE=209 where FST_02_CODE=200 and FST_Product='HR: Transfered From SG&A';
update FIN_MOEIN_MAPPING set FST_02_CODE=210 where FST_02_CODE=200 and FST_Product='InsureTech';


-- create table FIN_MOEIN_MAPPING_010322_bak as
--     select * from FIN_MOEIN_MAPPING;
select count(*) from FIN_MOEIN_MAPPING_010322_bak;

--  Interest + Tax + Depreciation + Amortization        14,269,767,702
select sum(balance) balance from vw_fin_statement_int_tax_dep_amor b
where b.PYEAR=1400 and b.PMONTH=12;
--  8,995,203,712   <>    14,269,767,702
with q_yearmonth as (select distinct pyear,pmonth from fin_moein_report_etl where active=1)
   ,q_balance as (select nvl(sum(d.DEBIT), 0) - nvl(sum(d.CREDIT), 0) balance, m.FST_02_CODE, e.pyear, e.pmonth
                  from FIN_MOEIN_REPORT_DETAIL d
                           left join FIN_MOEIN_REPORT_ETL e on e.ID = d.F_MOEIN_REPORT_ETL
                           left join FIN_MOEIN_MAPPING m on m.MOEIN = d.slcode
                  group by m.FST_02_CODE, e.pyear, e.pmonth)
-- select balance from q_balance b where b.fst_02_code=508 and b.PYEAR=1400 and b.PMONTH=12;    -- 7,328,819,124    <>   7,860,749,537
-- select balance from q_balance b where b.fst_02_code=509 and b.PYEAR=1400 and b.PMONTH=12;    -- 1,666,384,588    <>   5,437,801,903
-- select balance from q_balance b where b.fst_02_code=515 and b.PYEAR=1400 and b.PMONTH=12;       -- Nan              <>   971,216,262
select -balance from q_balance b where b.fst_02_code=703 and b.PYEAR=1400 and b.PMONTH=12;       -- Nan              <>   Nan



--  Non-Operational Revenue and (Expenses)   (38,293,429)
--  Operational Profit or (Loss)     (18,829,085,910)


select case when d.SLCode=411303 and d.DLLevel5=998001 then 104 else m.FST_02_CODE end FST_02_CODE
     ,to_char( nvl(sum(d.DEBIT), 0) - nvl(sum(d.CREDIT), 0) , '999,999,999,999,999') balance
from FIN_MOEIN_REPORT_DETAIL d
left join FIN_MOEIN_REPORT_ETL e on e.ID = d.F_MOEIN_REPORT_ETL
left join FIN_MOEIN_MAPPING m on m.MOEIN = d.slcode
where e.active=1
and e.pyear=1401 and e.pmonth=2
group by case when d.SLCode=411303 and d.DLLevel5=998001 then 104 else m.FST_02_CODE end --, e.pyear, e.pmonth
-- order by m.FST_02_CODE
;

select * from FIN_MOEIN_MAPPING where FST_02_CODE=104;
select * from FIN_MOEIN_MAPPING where MOEIN=411303;
select * from FIN_MOEIN_MAPPING where MOEIN=411312;
select * from FIN_MOEIN_MAPPING where MOEIN=421001;
select * from FIN_MOEIN_MAPPING where MOEIN=511111;
select * from FIN_MOEIN_MAPPING where FST_Product='IPG';
select * from FIN_MOEIN_MAPPING where FST_Product='Refund';
select * from FIN_MOEIN_REPORT_DETAIL where SLCode=411303 and DLLevel5=998001;

select moein,count(*) from FIN_MOEIN_MAPPING group by moein having count(*)>1;
select * from FIN_MOEIN_MAPPING where moein in (111412,421001,511107,311302);
select * from FIN_MOEIN_MAPPING where moein in (421001);
delete from FIN_MOEIN_MAPPING where id in (632,818,829,830,631);


select count(*) from FIN_MOEIN_MAPPING;--189
select count(*) from FIN_MOEIN_MAPPING_010322_BAK;--285

select * from FIN_MOEIN_MAPPING;--189
select * from FIN_MOEIN_MAPPING_010322_BAK
where MOEIN not in (select moein from FIN_MOEIN_MAPPING)
;

select case when d.SLCode=411303 and d.DLLevel5=998001 then 104 else m.FST_02_CODE end FST_02_CODE
     ,case when d.SLCode=411303 and d.DLLevel5=998001 then 'Shaparak' else m.FST_Product end FST_Product
     ,to_char( nvl(sum(d.DEBIT), 0) - nvl(sum(d.CREDIT), 0) , '999,999,999,999,999') balance
from FIN_MOEIN_REPORT_DETAIL d
         left join FIN_MOEIN_REPORT_ETL e on e.ID = d.F_MOEIN_REPORT_ETL
         left join FIN_MOEIN_MAPPING m on m.MOEIN = d.slcode
where e.active=1
  and e.pyear=1401 and e.pmonth=2
group by case when d.SLCode=411303 and d.DLLevel5=998001 then 104 else m.FST_02_CODE end
,case when d.SLCode=411303 and d.DLLevel5=998001 then 'Shaparak' else m.FST_Product end
order by case when d.SLCode=411303 and d.DLLevel5=998001 then 104 else m.FST_02_CODE end
;

select to_number(FST_02_CODE),STATEMENT,CATEGORY,SUBCATEGORY,SUBCATEGORY2,PRODUCT,BALANCE,PYEAR,PMONTH
from vw_fin_statement_specials
where PRODUCT='PC2'
  and pyear=1401 and pmonth=2
;

select * from FINANCE.VW_FIN_ACTUAL_DECK
where 1=1
  and product='PC2'
--   and category='3-Operation Expenses'
  and pyear=1401 and pmonth=2
-- and statement like 'C)%'
;

select * from FIN_MOEIN_MAPPING where FST_02_CODE in (300,301);
select * from FIN_MOEIN_MAPPING where MOEIN in (511107);
-- 511107
select count(*) from FIN_MOEIN_MAPPING;
select count(*) from FIN_MOEIN_MAPPING_010322_BAK where FST_02_CODE in (300,301);

select * from FIN_MOEIN_REPORT_ETL;

select to_char(balance,'999,999,999,999'),d.* from vw_fin_actual_deck d
where pyear=1401 and pmonth=2
;


select * from FIN_MOEIN_REPORT_DETAIL;
select * from FIN_MOEIN_MAPPING;
